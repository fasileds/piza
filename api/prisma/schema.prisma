// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  name         String
  roles        Role[]      @relation("UserRoles")
  orders       Order[] 
  restaurants  Restorant[] @relation("RestaurantUsers")
  superAdminOf Restorant?  @relation("SuperAdminRestorant") 
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserRoles")
}

model Restorant {
  id           String  @id @default(uuid())
  email        String  @unique
  password     String
  name         String
  location     String
  phoneNumber  String
  logo         String
  superAdminId String  @unique 
  superAdmin   User    @relation("SuperAdminRestorant", fields: [superAdminId], references: [id])   
  pizzas       Piza[]  @relation("RestaurantPizzas")
  orders       Order[] @relation("RestaurantOrders")
  users        User[]  @relation("RestaurantUsers")
}

model Piza {
  id           String    @id @default(uuid())
  name         String
  toppings     Topping[] @relation("PizzaToppings")
  price        Float
  restaurant   Restorant @relation("RestaurantPizzas", fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]   @relation("PizzaOrders")
}

model Topping {
  id      String  @id @default(uuid())
  name    String
  price   Float?
  pizzas  Piza[]  @relation("PizzaToppings")
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model Order {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  pizza        Piza        @relation("PizzaOrders", fields: [pizzaId], references: [id])
  pizzaId      String
  toppings     Topping[] 
  restaurant   Restorant   @relation("RestaurantOrders", fields: [restaurantId], references: [id])
  restaurantId String
  quantity     Int
  totalPrice   Float
  createdAt    DateTime    @default(now())
  status       OrderStatus @default(PENDING)
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERED
  CANCELED
}
